let r=null,l;console.log("[background] background.js loaded and running");function u(t){t||(t="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"),console.log("[background:testAddVideo] broadcasting",t),chrome.tabs.query({},c=>{for(const e of c)try{chrome.tabs.sendMessage(e.id,{type:"PLAYER_ADD_VIDEO",url:t})}catch{}})}chrome.runtime.onMessage.addListener((t,c,e)=>{if(t?.type==="PING")return e({ok:!0}),!0;if(t?.type==="INIT_SOCKET")return(async()=>{try{r||await i(),e({ok:!!r})}catch(o){console.error("[background] INIT_SOCKET failed",o),e({ok:!1,error:String(o)})}})(),!0;if(t?.type==="TEST_UPLOAD_CHUNK")return(async()=>{try{const o=t.size||16,n=await globalThis.testUploadChunk(o);e(n)}catch(o){console.error("[background] TEST_UPLOAD_CHUNK failed",o),e({ok:!1,error:String(o)})}})(),!0;if(t?.type==="TEST_ADD_VIDEO"){try{u(t.url),e({ok:!0})}catch(o){e({ok:!1,error:String(o)})}return!0}if(t?.type==="MODIFIED_CHUNK")return(async()=>{try{r||i();const o=Date.now();for(;(!r||typeof r.emit!="function")&&Date.now()-o<3e3;)await new Promise(n=>setTimeout(n,100));r&&typeof r.emit=="function"?(r.emit("upload_chunk",t.chunk),e({ok:!0})):(console.warn("[background] cannot forward modified chunk, socket not available"),e({ok:!1,error:"socket not available"}))}catch(o){console.error("[background] failed to forward modified chunk",o),e({ok:!1,error:String(o)})}})(),!0;if(t?.type==="UPLOAD_CHUNK")return(async()=>{try{console.log("[background] received UPLOAD_CHUNK message from",c?.id||c),r||i();const o=Date.now();for(;(!r||typeof r.emit!="function")&&Date.now()-o<3e3;)await new Promise(a=>setTimeout(a,100));if(!r||typeof r.emit!="function"){console.warn("[background] socket not available when handling UPLOAD_CHUNK"),e({ok:!1,error:"socket not available"});return}let n=t.chunk;n&&typeof n.arrayBuffer=="function"&&(n=await n.arrayBuffer());try{console.log("[background] emitting upload_chunk, payload size=",n&&n.byteLength?n.byteLength:n&&n.length||"unknown"),r.emit("upload_chunk",n),console.log("[background] socket.emit returned for upload_chunk")}catch(a){console.error("[background] socket.emit error",a),e({ok:!1,error:String(a)});return}e({ok:!0})}catch(o){console.error("[background] UPLOAD_CHUNK handler error",o),e({ok:!1,error:String(o)})}})(),!0});chrome.action.onClicked.addListener(async t=>{if(t?.id)try{const[{result:c}={}]=await chrome.scripting.executeScript({target:{tabId:t.id},func:()=>{if(window.__recordingStripInjected){const e=document.getElementById("recording-strip-overlay");return e&&(e.style.visibility="visible"),!0}return!1}});if(c){console.log("[background] strip already present, made visible");return}await chrome.scripting.executeScript({target:{tabId:t.id},files:["contentScript.js"]}),console.log("[background] content script injected on demand")}catch(c){console.error("[background] failed to inject content script",c)}});let s=null;const f=2e3,g="http://localhost:5000/latest_video";async function d(){try{const t=await fetch(g,{cache:"no-store"});if(!t.ok)return;const c=await t.json(),e=c&&c.url;if(e&&e!==s){s=e,console.log("[background] new video url",e);const o=await chrome.tabs.query({});for(const n of o)try{chrome.tabs.sendMessage(n.id,{type:"PLAYER_ADD_VIDEO",url:e})}catch{}}}catch{}}setInterval(d,f);async function i(){const t="http://localhost:5000";try{try{importScripts(chrome.runtime.getURL("vendor/socket.io.min.js")),console.log("[background] imported socket.io vendor via importScripts")}catch(o){console.warn("[background] failed to import socket.io vendor via importScripts",o)}const e=typeof self<"u"&&self.io||typeof window<"u"&&window.io||null;if(typeof e!="function"){console.warn("[background] socket.io client not available (io is not defined); keeping polling fallback");return}console.log("[background] socket.io client available, connecting to",t),r=e(t),r.on("connect",()=>console.log("[background] socket connected")),r.on("disconnect",()=>console.log("[background] socket disconnected")),r.on("video_uploaded",o=>{console.log("[background] video_uploaded",o),o&&o.url&&(s=o.url,chrome.tabs.query({},n=>{for(const a of n)try{chrome.tabs.sendMessage(a.id,{type:"PLAYER_ADD_VIDEO",url:o.url})}catch{}}))}),r.on("chunk_saved",o=>{console.log("[background] chunk_saved",o),chrome.tabs.query({},n=>{for(const a of n)try{chrome.tabs.sendMessage(a.id,{type:"CHUNK_SAVED",info:o})}catch{}})});try{clearInterval(h)}catch{}console.log("[background] socket background relay initialized")}catch(e){console.warn("[background] initSocketBackground encountered an error, will use polling fallback",e)}const c=()=>{l=new RTCPeerConnection,l.createDataChannel("vid-chunks"),l.ondatachannel=e=>{const o=e.channel;o.onmessage=n=>{console.log("Receive WebRTC message from backend: ",n.data),chrome.runtime.sendMessage({type:"MODIFIED_CHUNK",chunk:n.data})}},l.onicecandidate=e=>{e.candidate&&r&&typeof r.emit=="function"&&r.emit("ice-candidate",e.candidate)}};try{globalThis.initializeWebRTC=c}catch{}}try{globalThis.initSocketBackground=i,globalThis.initializeSocket=i,globalThis.testAddVideo=u,globalThis.testUploadChunk=async function(c=16){try{r||i();const e=Date.now();for(;(!r||typeof r.emit!="function"||r.connected===!1)&&Date.now()-e<3e3;)await new Promise(n=>setTimeout(n,120));if(!r||typeof r.emit!="function")return console.warn("[background:testUploadChunk] socket not available"),{ok:!1,error:"socket not available"};const o=new Uint8Array(c);for(let n=0;n<c;n++)o[n]=n&255;return r.emit("upload_chunk",o.buffer),console.log("[background:testUploadChunk] emitted chunk size=",c),{ok:!0}}catch(e){return console.error("[background:testUploadChunk] error",e),{ok:!1,error:String(e)}}}}catch(t){console.warn("[background] could not attach globals",t)}const h=setInterval(d,f);d();i().catch(t=>console.warn("[background] initSocketBackground failed",t));
